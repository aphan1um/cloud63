- name: Install docker py
  become: yes
  pip:
    name: docker
    state: latest

- name: Remove backports.ssl-match-hostname
  become: yes
  pip:
    name: backports.ssl-match-hostname
    state: absent

- name: Reinstall backports.ssl-match-hostname
  become: yes
  apt:
    name: python-backports.ssl-match-hostname
    state: latest

- name: Start up a new swarm
  docker_swarm:
    state: present
  register: swarm
  when: inventory_hostname == swarm_leader

- debug:
    msg: "{{ hostvars[swarm_leader]['swarm']['swarm_facts'] }}"

- name: Add workers to swarm
  docker_swarm:
    state: join
    remote_addrs: ["{{ swarm_leader }}"]
    advertise_addr: "{{ inventory_hostname }}"
    join_token: "{{ hostvars[swarm_leader]['swarm'].swarm_facts.JoinTokens.Worker }}"

  when: inventory_hostname in groups['workers']
  loop: "{{ groups['workers'] }}"

- name: Add managers to swarm
  docker_swarm:
    state: join
    remote_addrs: ["{{ swarm_leader }}"]
    advertise_addr: "{{ inventory_hostname }}"
    join_token: "{{ hostvars[swarm_leader]['swarm'].swarm_facts.JoinTokens.Manager }}"
  when: (inventory_hostname in groups['managers']) and (inventory_hostname != swarm_leader)
  loop: "{{ groups['managers'] }}"

- block:
    - name: Adding labels to nodes
      command: "docker node update --label-add '{{ item.0.key }}=yes' {{ hostvars[item.1]['ansible_nodename'] }}"
      when: item.0.key not in ["all", "ungrouped", "workers", "managers"]
      with_subelements:
        - "{{ groups | dict2items }}"
        - value
  when: inventory_hostname == swarm_leader